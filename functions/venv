#!/usr/bin/zsh

# Create python virtual environnement if not exist, activate it and install
# requirements
venv() {
    destroy() {
        print_warning "Destroying virtual environnement"

        local path_to_remove=(__pycache__ venv .mypy_cache)
        local error="false"


        if where deactivate > /dev/null; then 
            if deactivate; then
                print_success "Venv desactivated" 
            else
                print_error "Unable to desactivate venv"
                return 1
            fi
        fi

        print_info "Removing files"
        for file in $path_to_remove; do
            if [[ -e "$file" ]]; then 
                print_info "Remove ${file}"
                rm -r "$file"

                if [[ $? -gt 0 ]]; then
                    print_error Impossible de supprimer ${file}
                    error="true"
                fi
            fi
        done

        if [[ "$error" = 'false' ]]; then 
            print_success "Venv destroyed"
            return 0
        else
            error "Something went wrong"
            return 1
        fi
    }

    create() {
        python_version=$1

        if [[ -n "$VIRTUAL_ENV" ]]; then
            deactivate
        fi

        if [[ -e 'venv' ]]; then
            print_info "Venv already exist, skip init"
            source venv/bin/activate && return 0 || return 1
        fi

        print_info "Venv not exist, create it"

        python${python_version} -m venv venv || return 1
        source venv/bin/activate || return 1

        print_info "Upgrade pip"
        pip install --upgrade pip

        requirements='requirements.txt'
        requirements_dev='requirements-dev.txt'
        print_info "Install requirements"
        if [[ -e $requirements_dev ]]; then
            pip install -r $requirements_dev
        elif [[ -e $requirements ]]; then
            pip install -r $requirements
        else
            print_info "No requirements file found"
        fi

        mypy='venv/bin/mypy'
        [[ -f $mypy ]] && $mypy --install-types --non-interactive .

        pre_commit='venv/bin/pre-commit'
        [[ -f $pre_commit ]] && $pre_commit install --install-hooks

        return 0
    }

    if [[ $1 == '-d' ]] || [[ $1 == '--destroy' ]]; then
        destroy && return 0 || return 1
    fi

    if [[ -n $1 ]]; then
        python_version=3.$1
    else
        python_version=3
    fi

    create $python_version
}

